
create table temp_up_layout_restrictions as select * from up_layout_restrictions;
drop table up_layout_restrictions cascade;

CREATE TABLE UP_LAYOUT_RESTRICTIONS (
  LAYOUT_ID int4 NOT NULL ,
  USER_ID int4 NOT NULL ,
  NODE_ID int4 NOT NULL ,
  RESTRICTION_NAME VARCHAR(128) NOT NULL ,
  RESTRICTION_VALUE VARCHAR(128),
  RESTRICTION_TREE_PATH VARCHAR(128) NOT NULL
);
ALTER TABLE UP_LAYOUT_RESTRICTIONS ADD CONSTRAINT UP_LAYOUT_RESTRICTIONS_PK PRIMARY KEY (LAYOUT_ID, USER_ID, NODE_ID, RESTRICTION_NAME, RESTRICTION_TREE_PATH);

insert into up_layout_restrictions select
layout_id,
user_id,
node_id,
'priority',
restriction_value,
restriction_tree_path
from temp_up_layout_restrictions;

drop table temp_up_layout_restrictions;


create table temp_up_fragment_restrictions as select * from up_fragment_restrictions;
drop table up_fragment_restrictions cascade;

CREATE TABLE UP_FRAGMENT_RESTRICTIONS (
  FRAGMENT_ID int4 NOT NULL ,
  NODE_ID int4 NOT NULL ,
  RESTRICTION_NAME VARCHAR(128) NOT NULL ,
  RESTRICTION_VALUE VARCHAR(128),
  RESTRICTION_TREE_PATH VARCHAR(128) NOT NULL
);
ALTER TABLE UP_FRAGMENT_RESTRICTIONS ADD CONSTRAINT UP_FRAGMENT_RESTRICTION_PK PRIMARY KEY (FRAGMENT_ID, NODE_ID, RESTRICTION_NAME, RESTRICTION_TREE_PATH);

insert into up_fragment_restrictions select
fragment_id,
node_id,
'priority',
restriction_value,
restriction_tree_path
from temp_up_fragment_restrictions;

drop table temp_up_fragment_restrictions;

drop table up_restrictions cascade;
drop table upc_keyword cascade;


INSERT INTO UP_VERSIONS (FNAME, MAJOR, MINOR, MICRO, DESCRIPTION) VALUES ('UP_FRAMEWORK',2,5,2,NULL);

UPDATE UP_CHANNEL SET CHAN_CLASS='org.jasig.portal.layout.alm.channels.CContentSubscriber' WHERE CHAN_CLASS='org.jasig.portal.layout.channels.CContentSubscriber';

INSERT INTO UP_CHANNEL ( CHAN_ID, CHAN_TITLE, CHAN_NAME, CHAN_DESC, CHAN_PUBL_ID, CHAN_PUBL_DT, CHAN_APVL_ID, CHAN_APVL_DT, CHAN_TYPE_ID, CHAN_CLASS, CHAN_TIMEOUT, CHAN_EDITABLE, CHAN_HAS_HELP, CHAN_FNAME, CHAN_SECURE) VALUES ( 91, 'User Preferences', 'User Preferences', 'DLM User Preferences channel', 0, '20-APR-2005', 0, '20-APR-2005', 1, 'org.jasig.portal.channels.DLMUserPreferences.CUserPreferences', 10000, 'N', 'N', 'portal/userpreferences/dlm', 'N'); 
INSERT INTO UP_CHANNEL ( CHAN_ID, CHAN_TITLE, CHAN_NAME, CHAN_DESC, CHAN_PUBL_ID, CHAN_PUBL_DT, CHAN_APVL_ID, CHAN_APVL_DT, CHAN_TYPE_ID, CHAN_CLASS, CHAN_TIMEOUT, CHAN_EDITABLE, CHAN_HAS_HELP, CHAN_HAS_ABOUT, CHAN_FNAME, CHAN_SECURE) VALUES ( 82, 'Password Management', 'Password Management', 'Allows management of passwords', 0, '20-APR-2005', 0, '20-APR-2005', 1, 'org.jasig.portal.channels.cusermanager.CUserManager', 100000, 'N', 'Y', 'N', 'passwordmgr', 'N'); 
INSERT INTO UP_CHANNEL ( CHAN_ID, CHAN_TITLE, CHAN_NAME, CHAN_DESC, CHAN_PUBL_ID, CHAN_PUBL_DT, CHAN_APVL_ID, CHAN_APVL_DT, CHAN_TYPE_ID, CHAN_CLASS, CHAN_TIMEOUT, CHAN_EDITABLE, CHAN_HAS_HELP, CHAN_HAS_ABOUT, CHAN_FNAME, CHAN_SECURE ) VALUES ( 50, 'DLM Administrator''s Guide', 'DLM Administrator''s Guide', 'A channel that presents an administrator''s guide for Distributed Layout Management.', 2, '20-APR-2005', 2, '20-APR-2005', -1, 'org.jasig.portal.layout.dlm.channels.guide.DlmIntroChannel', 5000, 'N', 'N', 'N', 'dlm.admin.guide', 'N' ); 


UPDATE UP_CHAN_TYPE SET TYPE_NAME='XML SSL' WHERE TYPE_ID=1;

INSERT INTO UP_CHAN_TYPE (TYPE_ID, TYPE_NAME, TYPE, TYPE_DESCR, TYPE_DEF_URI) VALUES ( 8, 'XML XSLT', 'org.jasig.portal.channels.CGenericXSLT', 'Transforms an XML document into a fragment of markup language using a single XSLT.', '/org/jasig/portal/channels/CGenericXSLT/CGenericJustXSLT.cpd'); 


INSERT INTO UP_SS_STRUCT (SS_ID, SS_NAME, SS_URI, SS_DESCRIPTION_URI, SS_DESCRIPTION_TEXT) VALUES ( 4, 'DLM Tabs and columns', '/org/jasig/portal/layout/DLM-tab-column/tab-column.xsl', '/org/jasig/portal/layout/DLM-tab-column/tab-column.sdf', 'Presents the DLM layout in terms of tabs and columns.'); 

INSERT INTO UP_SS_THEME ( SS_ID, SS_NAME, SS_URI, SS_DESCRIPTION_URI, SS_DESCRIPTION_TEXT, STRUCT_SS_ID, SAMPLE_ICON_URI, SAMPLE_URI, MIME_TYPE, DEVICE_TYPE, SERIALIZER_NAME, UP_MODULE_CLASS) VALUES ( 4, 'DLM Nested tables', '/org/jasig/portal/layout/DLM-tab-column/nested-tables/nested-tables.xsl', '/org/jasig/portal/layout/DLM-tab-column/nested-tables/nested-tables.sdf', 'Renders DLM tabs and columns as nested tables', 4, 'media/org/jasig/portal/layout/DLM-tab-column/nested-tables/sample_icon.gif', 'media/org/jasig/portal/layout/DLM-tab-column/nested-tables/sample_full.gif', 'text/html', 'workstation', 'HTML', 'org.jasig.portal.channels.DLMUserPreferences.TabColumnPrefsState'); 


INSERT INTO UP_SS_THEME_PARM (SS_ID, PARAM_NAME, PARAM_DEFAULT_VAL, PARAM_DESCRIPT, TYPE) VALUES (4, 'skin', 'java', 'Design skin name', 1);
INSERT INTO UP_SS_THEME_PARM (SS_ID, PARAM_NAME, PARAM_DEFAULT_VAL, PARAM_DESCRIPT, TYPE) VALUES (4, 'minimized', 'false', 'Flag determining if the channel is minimized or not', 3);


INSERT INTO UP_SS_STRUCT_PAR (SS_ID, PARAM_NAME, PARAM_DEFAULT_VAL, PARAM_DESCRIPT, TYPE) VALUES (4, 'activeTab', '1', 'The number of the DLM tab that is initially active', 1);
INSERT INTO UP_SS_STRUCT_PAR (SS_ID, PARAM_NAME, PARAM_DEFAULT_VAL, PARAM_DESCRIPT, TYPE) VALUES (4, 'width', '100%', 'Width of a DLM column', 2);
INSERT INTO UP_SS_MAP (THEME_SS_ID, STRUCT_SS_ID, MIME_TYPE) VALUES (4, 4, 'text/html');


INSERT INTO UP_PERMISSION (OWNER, PRINCIPAL_TYPE, PRINCIPAL_KEY, ACTIVITY, TARGET, PERMISSION_TYPE) VALUES ('UP_FRAMEWORK', 3, 'local.0', 'SUBSCRIBE', 'CHAN_ID.91', 'GRANT');
INSERT INTO UP_PERMISSION (OWNER, PRINCIPAL_TYPE, PRINCIPAL_KEY, ACTIVITY, TARGET, PERMISSION_TYPE) VALUES ('UP_FRAMEWORK', 3, 'local.1', 'SUBSCRIBE', 'CHAN_ID.82', 'GRANT');
INSERT INTO UP_PERMISSION (OWNER, PRINCIPAL_TYPE, PRINCIPAL_KEY, ACTIVITY, TARGET, PERMISSION_TYPE) VALUES ('UP_FRAMEWORK', 3, 'local.2', 'SUBSCRIBE', 'CHAN_ID.82', 'GRANT');
INSERT INTO UP_PERMISSION (OWNER, PRINCIPAL_TYPE, PRINCIPAL_KEY, ACTIVITY, TARGET, PERMISSION_TYPE) VALUES ('UP_FRAMEWORK', 3, 'local.3', 'SUBSCRIBE', 'CHAN_ID.82', 'GRANT');
INSERT INTO UP_PERMISSION (OWNER, PRINCIPAL_TYPE, PRINCIPAL_KEY, ACTIVITY, TARGET, PERMISSION_TYPE) VALUES ('org.jasig.portal.channels.cusermanager.CUserManager', 3, 'local.14', 'acctmgr', 'Account Manager', 'GRANT');
INSERT INTO UP_PERMISSION (OWNER, PRINCIPAL_TYPE, PRINCIPAL_KEY, ACTIVITY, TARGET, PERMISSION_TYPE) VALUES ('UP_FRAMEWORK', 3, 'local.0', 'SUBSCRIBE', 'CHAN_ID.50', 'GRANT');

INSERT INTO UP_GROUP_MEMBERSHIP (GROUP_ID, MEMBER_SERVICE, MEMBER_KEY, MEMBER_IS_GROUP) VALUES (53, 'local', '82', 'F');
INSERT INTO UP_GROUP_MEMBERSHIP (GROUP_ID, MEMBER_SERVICE, MEMBER_KEY, MEMBER_IS_GROUP) VALUES (53, 'local', '50', 'F');

UPDATE UP_CHANNEL  SET CHAN_CLASS='org.jasig.portal.layout.alm.channels.CFragmentManager' where CHAN_CLASS='org.jasig.portal.layout.channels.CFragmentManager';
create table temp_up_person_dir as select * from up_person_dir;
drop table up_person_dir cascade;
CREATE TABLE UP_PERSON_DIR (
  USER_NAME VARCHAR(50) NOT NULL ,
  ENCRPTD_PSWD VARCHAR(64),
  LST_PSWD_CGH_DT TIMESTAMP,
  FIRST_NAME VARCHAR(50),
  LAST_NAME VARCHAR(50),
  EMAIL VARCHAR(150)
);
ALTER TABLE UP_PERSON_DIR ADD CONSTRAINT UP_PERSON_DIR_PKEY PRIMARY KEY (USER_NAME);
insert into up_person_dir select
USER_NAME,
ENCRPTD_PSWD,
LST_PSWD_CGH_DT,
FIRST_NAME,
LAST_NAME,
EMAIL
from temp_up_person_dir;
drop table temp_up_person_dir cascade;

create table temp_person_dir_attr as select * from person_dir_attr;
drop table person_dir_attr cascade;
CREATE TABLE PERSON_DIR_ATTR (
  USER_NAME VARCHAR(50) NOT NULL ,
  PREFIX VARCHAR(25),
  SUFFIX VARCHAR(25),
  ADDRESS1 VARCHAR(255),
  ADDRESS2 VARCHAR(255),
  CITY VARCHAR(128),
  STATE VARCHAR(64),
  ZIP VARCHAR(64),
  PHONE VARCHAR(35)
);
CREATE UNIQUE INDEX PERSON_DIR_ATTR_USER_NAME_IDX ON PERSON_DIR_ATTR (USER_NAME);
ALTER TABLE PERSON_DIR_ATTR ADD CONSTRAINT PERSON_DIR_ATTR_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
insert into person_dir_attr select
USER_NAME,
PREFIX,
SUFFIX,
ADDRESS1,
ADDRESS2,
CITY,
STATE,
ZIP,
PHONE
from temp_person_dir_attr;
drop table temp_person_dir_attr cascade;


create table temp_topic as select * from topic;
drop table topic cascade;
CREATE TABLE TOPIC (
  TOPIC_ID int4 DEFAULT nextval('TOPIC_TOPIC_ID_SEQ'::text) NOT NULL ,
  NAME VARCHAR(80) NOT NULL ,
  PARENT_GROUP_ID int4 NOT NULL ,
  TYPE VARCHAR(196),
  DESCRIPTION VARCHAR(2048),
  GROUP_ID int4
);
CREATE UNIQUE INDEX TOPIC_UNIQUE_KEYS_IDX ON TOPIC (NAME, PARENT_GROUP_ID);
CREATE INDEX TOPIC_PARENT_GROUP_ID_IDX ON TOPIC (PARENT_GROUP_ID);
ALTER TABLE TOPIC ADD CONSTRAINT TOPIC_PKEY PRIMARY KEY (TOPIC_ID);
insert into topic select
TOPIC_ID,
NAME,
PARENT_GROUP_ID,
TYPE,
DESCRIPTION,
GROUP_ID
from temp_topic;
drop table temp_topic cascade;
ALTER TABLE CLIENT_TOPIC_KEY ADD CONSTRAINT CLIENT_TOPIC_TOPIC_ID_FK FOREIGN KEY (TOPIC_ID) REFERENCES TOPIC (TOPIC_ID);
ALTER TABLE TOPIC_OFFERING ADD CONSTRAINT TOPIC_OFFERING_TOPIC_FK FOREIGN KEY (TOPIC_ID) REFERENCES TOPIC (TOPIC_ID);
ALTER TABLE COURSE ADD CONSTRAINT COURSE_TOPIC_ID_FK FOREIGN KEY (COURSE_ID) REFERENCES TOPIC (TOPIC_ID);



create table temp_offering as select * from offering;
drop table offering cascade;
CREATE TABLE OFFERING (
  OFFERING_ID int4 DEFAULT nextval('OFFERING_OFFERING_ID_SEQ'::text) NOT NULL ,
  NAME VARCHAR(80) NOT NULL ,
  ENROLLMENT_MODEL VARCHAR(256) NOT NULL ,
  DESCRIPTION VARCHAR(2048),
  DEFAULT_ROLE_ID int4 NOT NULL ,
  STATUS int4,
  OPT_OFFERINGID VARCHAR(15),
  OPT_OFFERINGTERM VARCHAR(35),
  OPT_OFFERINGMONTHSTART int4 DEFAULT 0 ,
  OPT_OFFERINGDAYSTART int4 DEFAULT 0 ,
  OPT_OFFERINGYEARSTART int4 DEFAULT 0 ,
  OPT_OFFERINGMONTHEND int4 DEFAULT 0 ,
  OPT_OFFERINGDAYEND int4 DEFAULT 0 ,
  OPT_OFFERINGYEAREND int4 DEFAULT 0 ,
  OPT_OFFERINGHOURSTART int4 DEFAULT 0 ,
  OPT_OFFERINGMINUTESTART int4 DEFAULT 0 ,
  OPT_OFFERINGAMPMSTART int4 DEFAULT 0 ,
  OPT_OFFERINGHOUREND int4 DEFAULT 0 ,
  OPT_OFFERINGMINUTEEND int4 DEFAULT 0 ,
  OPT_OFFERINGAMPMEND int4 DEFAULT 0 ,
  OPT_OFFERINGLOCATION VARCHAR(25),
  GROUP_ID int4,
  OPT_DAYSOFWEEK int4 DEFAULT 0 
);
CREATE INDEX OFFERING_NAME_IDX ON OFFERING (NAME);
CREATE INDEX OFFERING_DRID_IDX ON OFFERING (DEFAULT_ROLE_ID);
ALTER TABLE OFFERING ADD CONSTRAINT OFFERING_PKEY PRIMARY KEY (OFFERING_ID);
insert into offering select
OFFERING_ID,
NAME,
ENROLLMENT_MODEL,
DESCRIPTION,
DEFAULT_ROLE_ID,
STATUS,
OPT_OFFERINGID,
OPT_OFFERINGTERM,
OPT_OFFERINGMONTHSTART,
OPT_OFFERINGDAYSTART,
OPT_OFFERINGYEARSTART,
OPT_OFFERINGMONTHEND,
OPT_OFFERINGDAYEND,
OPT_OFFERINGYEAREND,
OPT_OFFERINGHOURSTART,
OPT_OFFERINGMINUTESTART,
OPT_OFFERINGAMPMSTART,
OPT_OFFERINGHOUREND,
OPT_OFFERINGMINUTEEND,
OPT_OFFERINGAMPMEND,
OPT_OFFERINGLOCATION,
GROUP_ID,
OPT_DAYSOFWEEK
from temp_offering;
drop table temp_offering cascade;
ALTER TABLE CALENDAR ADD CONSTRAINT CALENDAR_OFFERING_ID_FK FOREIGN KEY (OFFERING_ID) REFERENCES OFFERING (OFFERING_ID);
ALTER TABLE GRADEBOOK_ITEM ADD CONSTRAINT GRADEBOOK_ITEM_OFF_ID_FK FOREIGN KEY (OFFERING_ID) REFERENCES OFFERING (OFFERING_ID);
ALTER TABLE NOTEPAD ADD CONSTRAINT NOTEPAD_OFFERING_ID_FK FOREIGN KEY (OFFERING_ID) REFERENCES OFFERING (OFFERING_ID);
ALTER TABLE ACTIVATION ADD CONSTRAINT ACTIVATION_OFFERING_ID_FK FOREIGN KEY (OFFERING_ID) REFERENCES OFFERING (OFFERING_ID);
ALTER TABLE CHANNEL_INSTANCE ADD CONSTRAINT CHANNEL_INST_OFF_ID_FK FOREIGN KEY (OFFERING_ID) REFERENCES OFFERING (OFFERING_ID);
ALTER TABLE MEMBERSHIP ADD CONSTRAINT MEMBERSHIP_OFFERING_ID_FK FOREIGN KEY (OFFERING_ID) REFERENCES OFFERING (OFFERING_ID);
ALTER TABLE CLIENT_OFFERING_KEY ADD CONSTRAINT CLIENT_OFF_OFFERING_ID_FK FOREIGN KEY (OFFERING_ID) REFERENCES OFFERING (OFFERING_ID);
ALTER TABLE TOPIC_OFFERING ADD CONSTRAINT TOPIC_OFFERING_OFFERING_FK FOREIGN KEY (OFFERING_ID) REFERENCES OFFERING (OFFERING_ID);
ALTER TABLE ADJUNCT_OFFERING_DATA ADD CONSTRAINT ADJ_OFF_DATA_OFF_ID_FK FOREIGN KEY (OFFERING_ID) REFERENCES OFFERING (OFFERING_ID);




create table temp_assessment_result as select * from assessment_result;
drop table assessment_result cascade;
CREATE TABLE ASSESSMENT_RESULT (
  RESULT_ID int4 DEFAULT nextval('ASSESSMENT_RESULT_ID_SEQ'::text) NOT NULL ,
  ASSESSMENT_ID VARCHAR(128) NOT NULL ,
  ACTIVATION_ID int4 NOT NULL ,
  USER_NAME VARCHAR(50) NOT NULL ,
  DATA TEXT NOT NULL ,
  COUNT_ATTEMPT int4 NOT NULL ,
  START_TIME TIMESTAMP
);
CREATE UNIQUE INDEX ASSESSMENT_RESULT_INDX ON ASSESSMENT_RESULT (ASSESSMENT_ID, ACTIVATION_ID, USER_NAME, START_TIME);
CREATE INDEX ASSESSMENT_RESULT_AI_IDX ON ASSESSMENT_RESULT (ACTIVATION_ID);
CREATE INDEX ASSESSMENT_RESULT_UN_IDX ON ASSESSMENT_RESULT (USER_NAME);
CREATE INDEX ASSESSMENT_RESULT_ST_IDX ON ASSESSMENT_RESULT (START_TIME);
CREATE INDEX ASSESSMENT_RESULT_CA_IDX ON ASSESSMENT_RESULT (COUNT_ATTEMPT);
ALTER TABLE ASSESSMENT_RESULT ADD CONSTRAINT ASSESSMENT_RESULT_PKEY PRIMARY KEY (RESULT_ID);
ALTER TABLE ASSESSMENT_RESULT ADD CONSTRAINT ASSESSMENT_RESULT_ID_FK FOREIGN KEY (ASSESSMENT_ID) REFERENCES ASSESSMENT (ID);
ALTER TABLE ASSESSMENT_RESULT ADD CONSTRAINT ASSESSMENT_RESULT_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
insert into assessment_result select
RESULT_ID,
ASSESSMENT_ID,
ACTIVATION_ID,
USER_NAME,
DATA,
COUNT_ATTEMPT,
START_TIME
from temp_assessment_result;
drop table temp_assessment_result cascade;
ALTER TABLE QUESTION_RESULT ADD CONSTRAINT RESULT_ID_FK FOREIGN KEY (RESULT_ID) REFERENCES ASSESSMENT_RESULT (RESULT_ID);



create table temp_chat_users as select * from chat_users;
drop table chat_users cascade;
CREATE TABLE CHAT_USERS (
  GROUP_ID VARCHAR(240) NOT NULL ,
  USER_NAME VARCHAR(50) NOT NULL
);
CREATE INDEX CHAT_USERS_GID_IDX ON CHAT_USERS (GROUP_ID);
CREATE INDEX CHAT_USERS_UN_IDX ON CHAT_USERS (USER_NAME);
ALTER TABLE CHAT_USERS ADD CONSTRAINT CHAT_USERS_PKEY PRIMARY KEY (GROUP_ID, USER_NAME);
ALTER TABLE CHAT_USERS ADD CONSTRAINT CHAT_USERS_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
insert into chat_users select
GROUP_ID,
USER_NAME
from temp_chat_users;
drop table temp_chat_users cascade;


create table temp_calendar as select * from calendar;
drop table calendar cascade;
CREATE TABLE CALENDAR (
  CALENDAR_ID int4 DEFAULT nextval('CALENDAR_CALENDAR_ID_SEQ'::text) NOT NULL ,
  OFFERING_ID int4,
  USER_NAME VARCHAR(50)
);
CREATE INDEX CALENDAR_USER_NAME_IDX ON CALENDAR (USER_NAME);
CREATE INDEX CALENDAR_OFFERING_ID_IDX ON CALENDAR (OFFERING_ID);
ALTER TABLE CALENDAR ADD CONSTRAINT CALENDAR_PKEY PRIMARY KEY (CALENDAR_ID);
ALTER TABLE CALENDAR ADD CONSTRAINT CALENDAR_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE CALENDAR ADD CONSTRAINT CALENDAR_OFFERING_ID_FK FOREIGN KEY (OFFERING_ID) REFERENCES OFFERING (OFFERING_ID);
insert into calendar select
CALENDAR_ID,
OFFERING_ID,
USER_NAME
from temp_calendar;
drop table temp_calendar cascade;
ALTER TABLE EVENT ADD CONSTRAINT EVENT_CALENDAR_ID_FK FOREIGN KEY (CALENDAR_ID) REFERENCES CALENDAR (CALENDAR_ID);


create table temp_channel_preference as select * from channel_preference;
drop table channel_preference cascade;
CREATE TABLE CHANNEL_PREFERENCE (
  USER_NAME VARCHAR(50) NOT NULL ,
  CHANNEL_PUBLISH_ID VARCHAR(32) NOT NULL ,
  PREFERENCE_NAME VARCHAR(255) NOT NULL ,
  PREFERENCE_VALUE TEXT
);
CREATE INDEX CHANNEL_PREFERENCE_CPID_IDX ON CHANNEL_PREFERENCE (CHANNEL_PUBLISH_ID);
CREATE INDEX CHANNEL_PREFERENCE_PN_IDX ON CHANNEL_PREFERENCE (PREFERENCE_NAME);
ALTER TABLE CHANNEL_PREFERENCE ADD CONSTRAINT CHANNEL_PREFERENCE_PKEY PRIMARY KEY (USER_NAME, CHANNEL_PUBLISH_ID, PREFERENCE_NAME);
ALTER TABLE CHANNEL_PREFERENCE ADD CONSTRAINT CHAN_PREF_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
insert into channel_preference select
USER_NAME,
CHANNEL_PUBLISH_ID,
PREFERENCE_NAME,
PREFERENCE_VALUE
from temp_channel_preference;
drop table temp_channel_preference;


create table temp_gradebook_score as select * from gradebook_score;
drop table gradebook_score cascade;
CREATE TABLE GRADEBOOK_SCORE (
  GRADEBOOK_SCORE_ID int4 DEFAULT nextval('GRADEBOOK_SCORE_SEQ'::text) NOT NULL ,
  GRADEBOOK_ITEM_ID int4 NOT NULL ,
  SCORE int4 NOT NULL ,
  USER_NAME VARCHAR(50) NOT NULL ,
  ORIGINAL_SCORE int4 NOT NULL
);
CREATE UNIQUE INDEX GRADEBOOK_SCORE_UNIQUE_KEYS ON GRADEBOOK_SCORE (GRADEBOOK_ITEM_ID, USER_NAME);
CREATE INDEX GRADEBOOK_SCORE_ID_IDX ON GRADEBOOK_SCORE (GRADEBOOK_ITEM_ID);
CREATE INDEX GRADEBOOK_SCORE_SCORE_IDX ON GRADEBOOK_SCORE (SCORE);
CREATE INDEX GRADEBOOK_SCORE_UN_IDX ON GRADEBOOK_SCORE (USER_NAME);
CREATE INDEX GRADEBOOK_SCORE_OS_IDX ON GRADEBOOK_SCORE (ORIGINAL_SCORE);
ALTER TABLE GRADEBOOK_SCORE ADD CONSTRAINT GRADEBOOK_SCORE_ID_PKEY PRIMARY KEY (GRADEBOOK_SCORE_ID);
ALTER TABLE GRADEBOOK_SCORE ADD CONSTRAINT GBOOK_SCORE_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE GRADEBOOK_SCORE ADD CONSTRAINT GBOOK_SCORE_GBOOK_ITEM_ID_FK FOREIGN KEY (GRADEBOOK_ITEM_ID) REFERENCES GRADEBOOK_ITEM (GRADEBOOK_ITEM_ID);
insert into gradebook_score select
GRADEBOOK_SCORE_ID,
GRADEBOOK_ITEM_ID,
SCORE,
USER_NAME,
ORIGINAL_SCORE
from temp_gradebook_score;
drop table temp_gradebook_score cascade;


create table temp_notepad as select * from notepad;
drop table notepad cascade;
CREATE TABLE NOTEPAD (
  NOTEPAD_ID int4 DEFAULT nextval('NOTEPAD_ID_SEQ'::text) NOT NULL ,
  OFFERING_ID int4 NOT NULL ,
  USER_NAME VARCHAR(50) NOT NULL ,
  UPDATE_DATE date NOT NULL ,
  TITLE VARCHAR(255),
  BODY TEXT
);
CREATE INDEX NOTEPAD_UN_OFF_IDX ON NOTEPAD (USER_NAME, OFFERING_ID);
CREATE INDEX NOTEPAD_OFFERING_IDX ON NOTEPAD (OFFERING_ID);
CREATE INDEX NOTEPAD_UD_IDX ON NOTEPAD (UPDATE_DATE);
ALTER TABLE NOTEPAD ADD CONSTRAINT NOTEPAD_PKEY PRIMARY KEY (NOTEPAD_ID);
ALTER TABLE NOTEPAD ADD CONSTRAINT NOTEPAD_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE NOTEPAD ADD CONSTRAINT NOTEPAD_OFFERING_ID_FK FOREIGN KEY (OFFERING_ID) REFERENCES OFFERING (OFFERING_ID);
insert into notepad select
NOTEPAD_ID,
OFFERING_ID,
USER_NAME,
UPDATE_DATE,
TITLE,
BODY
from temp_notepad;
drop table temp_notepad cascade;


create table temp_user_activation as select * from user_activation;
drop table user_activation cascade;
CREATE TABLE USER_ACTIVATION (
  ACTIVATION_ID int4 NOT NULL ,
  USER_NAME VARCHAR(50) NOT NULL
);
CREATE INDEX USER_ACTIVATION_AD_IDX ON USER_ACTIVATION (ACTIVATION_ID);
CREATE INDEX USER_ACTIVATION_UN_IDX ON USER_ACTIVATION (USER_NAME);
ALTER TABLE USER_ACTIVATION ADD CONSTRAINT USER_ACT_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE USER_ACTIVATION ADD CONSTRAINT USER_ACT_ACT_ID_FK FOREIGN KEY (ACTIVATION_ID) REFERENCES ACTIVATION (ACTIVATION_ID);
insert into user_activation select
ACTIVATION_ID,
USER_NAME
from temp_user_activation;
drop table temp_user_activation cascade;


create table temp_membership as select * from membership;
drop table membership cascade;
CREATE TABLE MEMBERSHIP (
  MEMBERSHIP_ID int4 DEFAULT nextval('MEMBERSHIP_MEMBERSHIP_ID_SEQ'::text) NOT NULL ,
  OFFERING_ID int4 NOT NULL ,
  USER_NAME VARCHAR(35) NOT NULL ,
  ROLE_ID int4,
  HIDE_GRADEBOOK BOOLEAN,
  ENROLLMENT_STATUS int4 DEFAULT 1 
);
CREATE UNIQUE INDEX MEMBERSHIP_UNIQUE_KEYS_INDEX ON MEMBERSHIP (OFFERING_ID, USER_NAME);
CREATE INDEX MEMBERSHIP_USER_NAME_IDX ON MEMBERSHIP (USER_NAME);
CREATE INDEX MEMBERSHIP_ROLE_ID_IDX ON MEMBERSHIP (ROLE_ID);
ALTER TABLE MEMBERSHIP ADD CONSTRAINT MEMBERSHIP_PKEY PRIMARY KEY (MEMBERSHIP_ID);
ALTER TABLE MEMBERSHIP ADD CONSTRAINT MEMBERSHIP_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE MEMBERSHIP ADD CONSTRAINT MEMBERSHIP_ROLEID_FK FOREIGN KEY (ROLE_ID) REFERENCES ROLE (ROLE_ID);
ALTER TABLE MEMBERSHIP ADD CONSTRAINT MEMBERSHIP_OFFERING_ID_FK FOREIGN KEY (OFFERING_ID) REFERENCES OFFERING (OFFERING_ID);
insert into membership select
MEMBERSHIP_ID,
OFFERING_ID,
USER_NAME,
ROLE_ID,
HIDE_GRADEBOOK,
ENROLLMENT_STATUS
from temp_membership;
drop table temp_membership cascade;


create table temp_person_dir_metadata as select * from person_dir_metadata;
drop table person_dir_metadata cascade;
CREATE TABLE PERSON_DIR_METADATA (
  USER_NAME VARCHAR(50) NOT NULL ,
  ATTR_NAME VARCHAR(63) NOT NULL ,
  ATTR_VALUE VARCHAR(255) NOT NULL
);
ALTER TABLE PERSON_DIR_METADATA ADD CONSTRAINT PERSON_DIR_METADATA_PKEY PRIMARY KEY (USER_NAME, ATTR_NAME);
ALTER TABLE PERSON_DIR_METADATA ADD CONSTRAINT PERSON_DR_MTDT_USERNAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
insert into person_dir_metadata select
USER_NAME,
ATTR_NAME,
ATTR_VALUE
from temp_person_dir_metadata;
drop table temp_person_dir_metadata cascade;


create table temp_up_user as select * from up_user;
drop table up_user cascade;
CREATE TABLE UP_USER (
  USER_ID int4 NOT NULL ,
  USER_NAME VARCHAR(50) NOT NULL ,
  USER_DFLT_USR_ID int4,
  USER_DFLT_LAY_ID int4,
  NEXT_STRUCT_ID int4,
  LST_CHAN_UPDT_DT TIMESTAMP
);
ALTER TABLE UP_USER ADD CONSTRAINT UP_USER_USER_NAME_PKEY PRIMARY KEY (USER_NAME);
ALTER TABLE UP_USER ADD CONSTRAINT UP_USER_USER_ID_UNIQ UNIQUE (USER_ID);
insert into up_user select
USER_ID,
USER_NAME,
USER_DFLT_USR_ID,
USER_DFLT_LAY_ID,
NEXT_STRUCT_ID,
LST_CHAN_UPDT_DT
from temp_up_user;
drop table temp_up_user cascade;
ALTER TABLE ASSESSMENT_RESULT ADD CONSTRAINT ASSESSMENT_RESULT_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE CHAT_USERS ADD CONSTRAINT CHAT_USERS_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE CALENDAR ADD CONSTRAINT CALENDAR_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE CHANNEL_PREFERENCE ADD CONSTRAINT CHAN_PREF_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE GRADEBOOK_SCORE ADD CONSTRAINT GBOOK_SCORE_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE NOTEPAD ADD CONSTRAINT NOTEPAD_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE USER_ACTIVATION ADD CONSTRAINT USER_ACT_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE MEMBERSHIP ADD CONSTRAINT MEMBERSHIP_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE PERSON_DIR_ATTR ADD CONSTRAINT PERSON_DIR_ATTR_USER_NAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE PERSON_DIR_METADATA ADD CONSTRAINT PERSON_DR_MTDT_USERNAME_FK FOREIGN KEY (USER_NAME) REFERENCES UP_USER (USER_NAME);
ALTER TABLE CLIENT_USER_KEY ADD CONSTRAINT CLIENT_USER_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES UP_USER (USER_ID);
ALTER TABLE UP_LAYOUT_STRUCT_AGGR ADD CONSTRAINT UP_LAYOUT_STRUCT_AGGR_UID_FK FOREIGN KEY (USER_ID) REFERENCES UP_USER (USER_ID);
ALTER TABLE UP_USER_LAYOUT_AGGR ADD CONSTRAINT UP_USER_LAYOUT_AGGR_UID_FK FOREIGN KEY (USER_ID) REFERENCES UP_USER (USER_ID);

update offering set enrollment_model = 'Student Information System' where enrollment_model = 'sis';

CREATE TABLE temp_up_group AS SELECT * FROM up_group;
DROP TABLE up_group CASCADE;
CREATE TABLE UP_GROUP (
  GROUP_ID VARCHAR(240) NOT NULL ,
  CREATOR_ID VARCHAR(240) NOT NULL ,
  ENTITY_TYPE_ID int4 NOT NULL ,
  GROUP_NAME VARCHAR(255) NOT NULL ,
  DESCRIPTION VARCHAR(2048)
);
CREATE INDEX UP_GROUP_CID_IDX ON UP_GROUP (CREATOR_ID);
CREATE INDEX UP_GROUP_ETID_IDX ON UP_GROUP (ENTITY_TYPE_ID);
ALTER TABLE UP_GROUP ADD CONSTRAINT UP_GROUP_PKEY PRIMARY KEY (GROUP_ID);

INSERT INTO up_group SELECT
group_id, 
creator_id,
entity_type_id,
group_name,
description
FROM temp_up_group;

DROP TABLE temp_up_group CASCADE;


CREATE TABLE temp_client_group_key AS SELECT * FROM client_group_key;
DROP TABLE client_group_key CASCADE;
CREATE TABLE CLIENT_GROUP_KEY (
  CLIENT_ID int4 NOT NULL ,
  EXTERNAL_ID VARCHAR(50) NOT NULL ,
  GROUP_ID VARCHAR(240) NOT NULL ,
  FOREIGN_ID VARCHAR(25)
);

ALTER TABLE CLIENT_GROUP_KEY ADD CONSTRAINT CLIENT_GROUP_PKEY PRIMARY KEY (CLIENT_ID, EXTERNAL_ID, GROUP_ID);
ALTER TABLE CLIENT_GROUP_KEY ADD CONSTRAINT CLIENT_GROUP_CLIENT_ID_FK FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT_ORGANIZATION (CLIENT_ID);
ALTER TABLE CLIENT_GROUP_KEY ADD CONSTRAINT CLIENT_GROUP_GROUP_ID_FK FOREIGN KEY (GROUP_ID) REFERENCES UP_GROUP (GROUP_ID);

INSERT INTO client_group_key SELECT
client_id,
external_id,
group_id,
foreign_id
FROM temp_client_group_key;

DROP TABLE temp_client_group_key;


ALTER TABLE DPCS_RECURRENCE RENAME COLUMN INTERVAL to INTRVL;
DROP INDEX DPCS_ENTRY_COMP_IDX;
ALTER TABLE DPCS_ENTRY RENAME COLUMN DAY to ENTRY_DAY;
CREATE INDEX DPCS_ENTRY_COMP_IDX ON DPCS_ENTRY (CEID, CESEQ, ENTRY_DAY, EOR);
ALTER TABLE DPCS_ENTRY RENAME COLUMN SCOPE to ENTRY_SCOPE;
ALTER TABLE DPCS_RECURRENCE RENAME COLUMN DAY to RECUR_DAY;
UPDATE UP_VERSIONS SET MICRO='3' WHERE FNAME='UP_FRAMEWORK';

INSERT INTO UP_VERSIONS (FNAME, MAJOR, MINOR, MICRO, DESCRIPTION) VALUES ('ACADEMUS_PORTAL', '2', '1', '0', 'Academus Portal marketing version number');
INSERT INTO UP_VERSIONS(FNAME, MAJOR, MINOR, MICRO, DESCRIPTION) VALUES ('ACADEMUS_BUILD', '2', '1', '9', 'Academus build number');

INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (205, 'baseHelpUrl', 'help_Briefcase_Portlet.html', 'N');

INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (139, 'baseHelpUrl', 'help_Notifications_Portlet.html', 'N');

INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (138, 'baseHelpUrl', 'help_Blogging_Portlet.html', 'N'); 

ALTER TABLE UP_USER ADD COLUMN INITIAL_LOGIN_DATE TIMESTAMP WITHOUT TIME ZONE;

UPDATE UP_VERSIONS SET MICRO='10' WHERE FNAME='ACADEMUS_BUILD';
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (3, 'baseHelpUrl', 'help_Bookmark_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (101, 'baseHelpUrl', 'help_Introduction_to_Groupware_Administration_Channels.html%23213', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (108, 'baseHelpUrl', 'help_Calendar_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (109, 'baseHelpUrl', 'help_Calendar_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (110, 'baseHelpUrl', 'help_Calendar_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (112, 'baseHelpUrl', 'help_My_Notes_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (113, 'baseHelpUrl', 'help_Address_Book_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (118, 'baseHelpUrl', 'help_Classifieds_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (119, 'baseHelpUrl', 'help_Campus_News_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (120, 'baseHelpUrl', 'help_Webmail_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (124, 'baseHelpUrl', 'help_Discussion_Forums_Channel.html%23156', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (125, 'baseHelpUrl', 'help_Group_Chat_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (127, 'baseHelpUrl', 'help_Portal_User_Administration_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (134, 'baseHelpUrl', 'help_Group_Chat_Channel.html%23164', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (2013, 'baseHelpUrl', 'help_Campus_Announcements_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (2014, 'baseHelpUrl', 'help_Discussion_Forums_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (2015, 'baseHelpUrl', 'help_Survey_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (2016, 'baseHelpUrl', 'help_Survey_Channel.html', 'N');
INSERT INTO UP_CHANNEL_PARAM (CHAN_ID, CHAN_PARM_NM, CHAN_PARM_VAL, CHAN_PARM_OVRD) VALUES (2017, 'baseHelpUrl', 'help_Survey_Channel.html%23193', 'N');

UPDATE UP_CHANNEL_PARAM SET CHAN_ID = '2005' WHERE CHAN_ID = '205' ;

create table HG_USAGE (
	USER_NAME VARCHAR(80) PRIMARY KEY NOT NULL,
	INITIAL_USAGE_DATE TIMESTAMP NOT NULL
);

insert into HG_USAGE (USER_NAME, INITIAL_USAGE_DATE)
	select USER_NAME, INITIAL_LOGIN_DATE from UP_USER
	where INITIAL_LOGIN_DATE is not null;

alter table up_user_layout drop column cache_key;
